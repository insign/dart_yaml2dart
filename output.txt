FILE: ./analysis_options.yaml
# This file configures the static analysis results for your project (errors,
# warnings, and lints).
#
# This enables the 'recommended' set of lints from `package:lints`.
# This set helps identify many issues that may lead to problems when running
# or consuming Dart code, and enforces writing Dart using a single, idiomatic
# style and format.
#
# If you want a smaller set of lints you can change this to specify
# 'package:lints/core.yaml'. These are just the most critical lints
# (the recommended set includes the core lints).
# The core lints are also what is used by pub.dev for scoring packages.

include: package:lints/recommended.yaml

# Uncomment the following section to specify additional rules.

# linter:
#   rules:
#     - camel_case_types

# analyzer:
#   exclude:
#     - path/to/excluded/files/**

# For more information about the core and recommended set of lints, see
# https://dart.dev/go/core-lints

# For additional information about configuring this file, see
# https://dart.dev/guides/language/analysis-options

FILE: ./pubspec.yaml
name: yaml2dart
description: Converts a YAML file to a Dart file containing global scope constants. Especially good for pubspec.yaml.
version: 1.5.0
repository: https://github.com/insign/dart_yaml2dart

environment:
  sdk: ">=2.19.2 <4.0.0"

dev_dependencies:
  lints: ^6.0.0
  path: ^1.8.3
  test: ^1.21.0

dependencies:
  recase: ^4.1.0
  yaml: ^3.1.1

FILE: ./README.md
# yaml2dart

Converts a YAML file to a Dart file containing global scope constants. It allows developers to easily use YAML data in their Dart projects by generating a separate file with all the YAML data as constants. Especially good for `pubspec.yaml`.

## Getting started

```dart
dart pub add yaml2dart
```

## Usage

Assuming that the `example.yaml` file contains the following:

```yaml
name: "My Project"
version: "1.0.0"
```

The code is:

```dart
import 'package:yaml2dart/yaml2dart.dart';

void main() async {
  // Create a converter instance with the input and output file paths.
  final converter = Yaml2Dart('pub.yaml', 'lib/example_constants.dart');

  // Convert the YAML to Dart.
  await converter.convert();
}
```

The `example_constants.dart` file will be generated with the following content:

```dart
const exampleName = 'My Project';
const exampleVersion = '1.0.0';
```

To test:

```dart
  // Use the generated constants in your project.
  import 'package:my_project/example_constants.dart';

  print('Example name: $exampleName');
  print('Example version: $exampleVersion');
```

## LICENSE

[BSD 3-Clause License](./LICENSE)

## CONTRIBUTE

If you have an idea for a new feature or have found a bug, just do a pull request (PR).

FILE: ./pubspec.dart
const name = 'yaml2dart';
const description =
    'Converts a YAML file to a Dart file containing global scope constants. Especially good for pubspec.yaml.';
const version = '1.0.5';
const repository = 'https://github.com/insign/dart_yaml2dart';
const environment = '{sdk: >=2.19.2 <3.1.0}';
const devDependencies = '{lints: ^2.0.0, path: ^1.8.3, test: ^1.21.0}';
const dependencies = '{recase: ^4.1.0, yaml: ^3.1.1}';

FILE: ./lib/pubspec.dart
// THIS FILE WAS GENERATED BY yaml2dart. EDIT IS NOT RECOMMENDED.
const name = 'yaml2dart';
const description =
    'Converts a YAML file to a Dart file containing global scope constants. Especially good for pubspec.yaml.';
const version = '1.0.7';
const repository = 'https://github.com/insign/dart_yaml2dart';
const environment = '{sdk: >=2.19.2 <3.2.0}';
const devDependencies = '{lints: ^3.0.0, path: ^1.8.3, test: ^1.21.0}';
const dependencies = '{recase: ^4.1.0, yaml: ^3.1.1}';

FILE: ./test/yaml2dart_test.dart
import 'dart:io';
import 'package:test/test.dart';
import 'package:path/path.dart' as path;
import 'package:yaml2dart/yaml2dart.dart';

void main() {
  test('Converts YAML to Dart constants', () async {
    // Create a temporary directory for testing.
    final tempDir = await Directory.systemTemp.createTemp('yaml2dart_test_');
    final inputPath = path.join(tempDir.path, 'test_input.yaml');
    final outputPath = path.join(tempDir.path, 'test_output.dart');

    try {
      // Write the input YAML file.
      final inputFile = File(inputPath);
      await inputFile.writeAsString('''
        title: My App
        version: 1.2.3
        author: John Doe
''');

      // Convert the YAML file to a Dart file.
      final converter = Yaml2Dart(inputPath, outputPath);
      await converter.convert();

      // Verify that the output Dart file exists and has the correct contents.
      final outputFile = File(outputPath);
      expect(await outputFile.exists(), isTrue);
      expect(await outputFile.readAsString(), equals('''
${converter.warning}
const title = 'My App';
const version = '1.2.3';
const author = 'John Doe';
'''));
    } finally {
      // Clean up the temporary directory.
      await tempDir.delete(recursive: true);
    }
  });
}

FILE: ./example/yaml2dart_example.dart
import 'package:yaml2dart/yaml2dart.dart';

void main() async {
  // Create a converter instance with the input and output file paths.
  final converter = Yaml2Dart('example.yaml', 'example_constants.dart');

  // Convert the YAML to Dart.
  await converter.convert();
}

FILE: ./lib/yaml2dart.dart
library yaml2dart;

export 'src/yaml2dart_base.dart';

FILE: ./lib/src/yaml2dart_base.dart
import 'dart:io';
import 'package:yaml/yaml.dart';
import 'package:recase/recase.dart';

/// A utility class for converting YAML files to Dart constants.
class Yaml2Dart {
  final String inputFilePath;
  final String outputFilePath;
  final String warning = '// THIS FILE WAS GENERATED BY yaml2dart. EDIT IS NOT RECOMMENDED.';

  /// Creates a new instance of the `Yaml2Dart` class.
  ///
  /// [inputFilePath] is the path to the input YAML file.
  /// [outputFilePath] is the path to the output Dart file.
  Yaml2Dart(this.inputFilePath, this.outputFilePath);

  /// Converts the input YAML file to a Dart file containing constants.
  Future<void> convert() async {
    // Read the YAML file.
    final file = File(inputFilePath);
    final contents = await file.readAsString();
    final yaml = loadYaml(contents);

    // Create the output Dart file.
    final output = File(outputFilePath);
    final buffer = StringBuffer();

    buffer.writeln(warning);

    // Write each key-value pair in the YAML file as a Dart constant.
    yaml.forEach((key, value) {
      key = ReCase(key).camelCase;
      buffer.writeln('const $key = \'$value\';');
    });

    // Write the contents to the output file.
    await output.writeAsString(buffer.toString());
  }
}

